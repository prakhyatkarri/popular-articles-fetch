version: '3'
services:
  mongo:
    container_name: mongo
    hostname: mongo
    image: mongo:4.4
    ports:
      - 27017:27017
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    #      MONGO_INITDB_DATABASE: popular_articles
    networks:
      - e2e

  kafka:
    container_name: kafka
    hostname: kafka
    image: landoop/fast-data-dev:2.3.1
    restart: always
    environment:
      ADV_HOST: kafka
      RUNTESTS: 0
      FORWARDLOGS: 0
      SAMPLEDATA: 0
      KAFKA_ADVERTISED_HOST_NAME: kafka
    ports:
      - 2181:2181
      - 3030:3030
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 8083:8083
    networks:
      - e2e

#  zookeeper:
#    hostname: zookeeper
#    container_name: zookeeper
#    image: wurstmeister/zookeeper:3.4.6
#    ports:
#      - "2181:2181"
#  kafka:
#    container_name: kafka
#    hostname: kafka
#    image: wurstmeister/kafka:2.12-2.4.0
#    ports:
#      - "9092:9092"
#    expose:
#      - "9093"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_CREATE_TOPICS: "topic_test:1:1"
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - e2e

networks:
  e2e: { }



